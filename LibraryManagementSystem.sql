-- MEMBER TABLE
CREATE TABLE MEMBER (
	MEMBER_ID INT PRIMARY KEY,
    NAME VARCHAR(100),
    EMAIL VARCHAR(100),
    PHONE VARCHAR(15),
    JOIN_DATE DATE
);

-- BOOK TABLE
CREATE TABLE BOOK (
	BOOK_ID INT PRIMARY KEY,
    TITLE VARCHAR(150),
    AUTHOR VARCHAR(100),
    CATEGORY VARCHAR(50),
    COPIES_AVAILABLE INT
);

-- STAFF TABLE
CREATE TABLE STAFF (
	STAFF_ID INT PRIMARY KEY,
    NAME VARCHAR(100),
    ROLE VARCHAR(50)
);

-- ISSUE TABLE
CREATE TABLE ISSUE (
	ISSUE_ID INT PRIMARY KEY,
    BOOK_ID INT,
    MEMBER_ID INT,
    STAFF_ID INT,
    ISSUE_DATE DATE,
    DUE_DATE DATE,
    FOREIGN KEY (BOOK_ID) REFERENCES BOOK (BOOK_ID),
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID),
    FOREIGN KEY (STAFF_ID) REFERENCES STAFF (STAFF_ID)
);

-- RETURN TABLE
CREATE TABLE RETURN_BOOK (
	RETURN_ID INT PRIMARY KEY,
    ISSUE_ID INT,
    RETURN_DATE DATE,
    FINE_AMOUNT DECIMAL(8, 2),
    FOREIGN KEY (ISSUE_ID) REFERENCES ISSUE(ISSUE_ID)
);

INSERT INTO MEMBER VALUES (1, 'ALICE', 'ALICE@GMAIL.COM', '9876543210', '2025-08-01');
INSERT INTO MEMBER VALUES (2, 'BOB', 'BOB@GMAIL.COM', '9876543211', '2025-08-02');
INSERT INTO BOOK VALUES (101, 'C PROGRAMMING', 'K&R', 'PROGRAMMING', 3);
INSERT INTO BOOK VALUES (102, 'HARRY POTTER', 'J.K. ROWLING', 'FRICTION', 5);
INSERT INTO STAFF VALUES (1, 'MR.SHARMA', 'LIBRARIAN');
INSERT INTO ISSUE VALUES (1, 101, 1, 1, '2025-08-01', '2025-08-07');
INSERT INTO ISSUE VALUES (2, 102, 2, 1, '2025-08-02', '2025-08-08');
INSERT INTO RETURN_BOOK VALUES (1, 1, '2025-08-10', 0.00);
UPDATE MEMBER SET PHONE = "9000234512" WHERE MEMBER_ID = 2;
DELETE FROM BOOK WHERE BOOK_ID = 1;

SELECT * FROM BOOK;
SELECT TITLE, AUTHOR, COPIES_AVAILABLE FROM BOOK;
SELECT MEMBER_ID, NAME, JOIN_DATE FROM MEMBER WHERE JOIN_DATE > '2025-08-01';
SELECT BOOK_ID, TITLE FROM BOOK WHERE TITLE LIKE '%PROGRAMMING%';
SELECT TITLE, CATEGORY, COPIES_AVAILABLE FROM BOOK WHERE CATEGORY = 'PROGRAMMING' AND COPIES_AVAILABLE > 2;
SELECT TITLE, CATEGORY, COPIES_AVAILABLE FROM BOOK WHERE CATEGORY = 'PROGRAMMING' OR COPIES_AVAILABLE = 5;
SELECT NAME, JOIN_DATE FROM MEMBER WHERE JOIN_DATE BETWEEN '2025-08-01' AND '2025-08-01';
SELECT TITLE, COPIES_AVAILABLE FROM BOOK ORDER BY COPIES_AVAILABLE DESC;
SELECT TITLE, COPIES_AVAILABLE FROM BOOK ORDER BY COPIES_AVAILABLE DESC LIMIT 1;

SELECT CATEGORY, COUNT(BOOK_ID) AS TOTAL_BOOKS FROM BOOK GROUP BY CATEGORY;
SELECT AVG(FINE_AMOUNT) AS AverageFine FROM RETURN_BOOK;
SELECT AUTHOR, SUM(COPIES_AVAILABLE) AS TotalCopiesAvailable FROM BOOK GROUP BY AUTHOR HAVING SUM(COPIES_AVAILABLE) > 3;

-- TASK6
SELECT MEMBER_ID, NAME, EMAIL FROM MEMBER WHERE MEMBER_ID IN (SELECT MEMBER_ID FROM ISSUE);
SELECT TITLE FROM BOOK WHERE BOOK_ID = (SELECT BOOK_ID FROM ISSUE WHERE MEMBER_ID = (SELECT MEMBER_ID FROM MEMBER WHERE NAME = 'ALICE'));
SELECT M.MEMBER_ID, M.NAME FROM MEMBER M WHERE M.MEMBER_ID IN (SELECT MEMBER_ID FROM ISSUE WHERE ISSUE_ID NOT IN (SELECT ISSUE_ID FROM RETURN_BOOK));
SELECT TITLE, COPIES_AVAILABLE FROM BOOK B WHERE B.COPIES_AVAILABLE > (SELECT AVG(COPIES_AVAILABLE) FROM BOOK);
SELECT MEMBER_ID, NAME FROM MEMBER M WHERE EXISTS (SELECT 1 FROM ISSUE I WHERE I.MEMBER_ID = M.MEMBER_ID);
SELECT B.TITLE, B.AUTHOR, (SELECT COUNT(I.ISSUE_ID) FROM ISSUE I WHERE I.BOOK_ID = B.BOOK_ID) AS TIME_ISSUED FROM BOOK B;
SELECT S.NAME AS STAFF_NAME FROM STAFF S INNER JOIN ISSUE I ON S.STAFF_ID = I.STAFF_ID INNER JOIN RETURN_BOOK R ON I.ISSUE_ID = R.ISSUE_ID WHERE R.FINE_AMOUNT = (SELECT MAX(FINE_AMOUNT) FROM (SELECT 
FINE_AMOUNT AS FINE_AMOUNT FROM RETURN_BOOK) AS MAX_FINES);


-- Task7
CREATE VIEW OVERDUE_BOOKS_VIEW AS SELECT M.NAME AS MEMBER_NAME, B.TITLE AS BookTitle, I.ISSUE_DATE, I.DUE_DATE, R.RETURN_DATE,R.FINE_AMOUNT FROM MEMBER M JOIN ISSUE I ON M.MEMBER_ID = I.MEMBER_ID 
JOIN BOOK B ON I.BOOK_ID = B.BOOK_ID JOIN RETURN_BOOK R ON I.ISSUE_ID = R.ISSUE_ID WHERE R.RETURN_DATE > I.DUE_DATE;
SELECT * FROM OVERDUE_BOOKS_VIEW;
CREATE VIEW STAFFISSUE_SUMMARY AS SELECT S.STAFF_ID, S.NAME AS STAFF_NAME, S.ROLE, COUNT(I.ISSUE_ID) AS TOTAL_BOOKS_ISSUED FROM STAFF S LEFT JOIN ISSUE I ON S.STAFF_ID = I.STAFF_ID GROUP BY S.STAFF_ID
, S.NAME, S.ROLE; 
SELECT * FROM STAFFISSUE_SUMMARY;
DROP VIEW OVERDUE_BOOKS_VIEW;